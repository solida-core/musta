from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("7.15.0")


##### setup report #####
configfile: "config/config.yaml"


##### load rules #####
include: "rules/common.smk"
include: "rules/samplename.smk"
include: "rules/call_variants.smk"
include: "rules/lofreq.smk"
include: "rules/muse.smk"
include: "rules/strelka.smk"
include: "rules/vardict.smk"
include: "rules/varscan.smk"
include: "rules/call_variants_tumoronly.smk"
include: "rules/filter_results.smk"
include: "rules/annotation.smk"
include: "rules/maftools.smk"


##### target rules #####
if config.get("run").get("all"):

    rule all:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/mutect/{sample}.somatic.mutect.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/lofreq/{sample}.somatic.lofreq.snvs.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/lofreq/{sample}.somatic.lofreq.indels.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/muse/{sample}.somatic.muse.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/strelka/{sample}.somatic.strelka.snvs.vcf.gz",
                ),
                sample=list(samples_master.keys()),
                ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/strelka/{sample}.somatic.strelka.indels.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/vardict/{sample}.somatic.vardict.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/varscan/{sample}.somatic.varscan.snvs.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/varscan/{sample}.somatic.varscan.indels.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),

            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "annotation/funcotator/{sample}_funcotated.maf",
                ),
                sample=list(samples_master.keys()),
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "analysis/signatures/plots/cosmic_signatures.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "analysis/driver/plots/somatic_interactions.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "analysis/base/plots/top10_VAF.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "analysis/pathways/plots/oncogenic_pathways.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "analysis/heterogeneity/tables/successful.tsv",
            ),


if config.get("run").get("call") and config.get("callers").get("mutect"):
    rule call_mutect:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/mutect/{sample}.somatic.mutect.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),

if config.get("run").get("call") and config.get("callers").get("lofreq"):
    rule call_lofreq:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/lofreq/{sample}.somatic.lofreq.snvs.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/lofreq/{sample}.somatic.lofreq.indels.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),


if config.get("run").get("call") and config.get("callers").get("muse"):
    rule call_muse:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/muse/{sample}.somatic.muse.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),


if config.get("run").get("call") and config.get("callers").get("strelka"):
    rule call_strelka:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/strelka/{sample}.somatic.strelka.snvs.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/strelka/{sample}.somatic.strelka.indels.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),

if config.get("run").get("call") and config.get("callers").get("vardict"):
    rule call_vardict:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/vardict/{sample}.somatic.vardict.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),

if config.get("run").get("call") and config.get("callers").get("varscan"):
    rule call_varscan:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/varscan/{sample}.somatic.varscan.snvs.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "variant_calling/varscan/{sample}.somatic.varscan.indels.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),

if config.get("run").get("annotate"):

    rule annotate:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "annotation/funcotator/{sample}_funcotated.maf",
                ),
                sample=list(samples_master.keys()),
            ),


if config.get("run").get("analysis"):

    rule analysis:
        input:
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "analysis/signatures/plots/cosmic_signatures.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "analysis/driver/plots/somatic_interactions.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "analysis/base/plots/top10_VAF.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "analysis/pathways/plots/oncogenic_pathways.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "analysis/heterogeneity/tables/successful.tsv",
            ),
