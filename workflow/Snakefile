from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("7.15.0")


##### setup report #####
configfile: "config/config.yaml"


##### load rules #####
include: "rules/common.smk"
include: "rules/samplename.smk"
include: "rules/bedfile.smk"
include: "rules/mutect.smk"
include: "rules/lofreq.smk"
include: "rules/muse.smk"
include: "rules/strelka.smk"
include: "rules/vardict.smk"
include: "rules/varscan.smk"
include: "rules/somaticseq.smk"
include: "rules/funcotator.smk"
include: "rules/vep.smk"
include: "rules/maftools.smk"

##### target rules #####
if config.get("run").get("all"):

    rule all:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.mutect.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.lofreq.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.lofreq.indels.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.muse.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.strelka.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
                ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.strelka.indels.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.vardict.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.varscan.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.varscan.indels.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.musta.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.musta.indels.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "classification/results/{sample}.annotated.maf",
                ),
                sample=list(samples_master.keys()),
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "interpretation/signatures/plots/cosmic_signatures.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "interpretation/driver/plots/somatic_interactions.png",
            ),
            # resolve_single_filepath(
            #     config.get("paths").get("results_dir"),
            #     "interpretation/base/plots/top10_VAF.png",
            # ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "interpretation/pathways/plots/oncogenic_pathways.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "interpretation/heterogeneity/tables/successful.tsv",
            ),


if config.get("run").get("detect") and config.get("callers").get("mutect"):
    rule call_mutect:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.mutect.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),

if config.get("run").get("detect") and config.get("callers").get("lofreq"):
    rule call_lofreq:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.lofreq.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.lofreq.indels.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),


if config.get("run").get("detect") and config.get("callers").get("muse"):
    rule call_muse:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.muse.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),


if config.get("run").get("detect") and config.get("callers").get("strelka"):
    rule call_strelka:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.strelka.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.strelka.indels.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),

if config.get("run").get("detect") and config.get("callers").get("vardict"):
    rule call_vardict:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.vardict.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),

if config.get("run").get("detect") and config.get("callers").get("varscan"):
    rule call_varscan:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.varscan.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.somatic.varscan.indels.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),

if config.get("run").get("ensemble"):
    rule combine_somaticseq:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.musta.snvs.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "detection/results/{sample}.musta.indels.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),

if config.get("run").get("classify") and config.get("annotators").get("vep"):
    rule run_vep:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "classification/results/{sample}.annotated.vep.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "classification/results/{sample}.annotated.vep.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "classification/results/{sample}.annotated.vep.maf",
                ),
                sample=list(samples_master.keys()),
            ),

if config.get("run").get("classify") and config.get("annotators").get("funcotator"):
    rule run_funcotator:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "classification/results/{sample}.annotated.funcotator.maf",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "classification/results/{sample}.annotated.funcotator.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "classification/results/{sample}.annotated.funcotator.vcf.gz.tbi",
                ),
                sample=list(samples_master.keys()),
                ),

if config.get("run").get("interpret"):

    rule analysis:
        input:
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "interpretation/base/plots/summary.png",
            ),

            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "interpretation/signatures/plots/cosmic_signatures.png",
            ),

            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "interpretation/driver/plots/oncodrive.png",
            ),

            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "interpretation/pathways/plots/oncogenic_pathways.png",
            ),

            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "interpretation/heterogeneity/tables/successful.tsv",
            ),
