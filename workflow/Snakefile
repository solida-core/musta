from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("7.15.0")


##### setup report #####
configfile: "config/config.yaml"


##### load rules #####
include: "rules/common.smk"
include: "rules/call_variants.smk"
include: "rules/lofreq.smk"
include: "rules/call_variants_tumoronly.smk"
include: "rules/filter_results.smk"
include: "rules/annotation.smk"
include: "rules/maftools.smk"


##### target rules #####
if config.get("run").get("all"):

    rule all:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "results/call/{sample}_somatic_filtered_selected.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "results/call/{sample}_somatic_final_minus-dbsnp.snvs.vcf.gz",
                ),
                sample=list(samples_master.keys()),
            ),
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "results/annotation/funcotator/{sample}_funcotated.maf",
                ),
                sample=list(samples_master.keys()),
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "results/analysis/signatures/plots/cosmic_signatures.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "results/analysis/driver/plots/somatic_interactions.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "results/analysis/base/plots/top10_VAF.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "results/analysis/pathways/plots/oncogenic_pathways.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "results/analysis/heterogeneity/tables/successful.tsv",
            ),


if config.get("run").get("call"):

    if config.get("call").get("mutect"):
        rule call_mutect:
            input:
                expand(
                    resolve_results_filepath(
                        config.get("paths").get("results_dir"),
                        "results/call/{sample}_somatic_filtered_selected.vcf.gz",
                    ),
                    sample=list(samples_master.keys()),
                ),
    
    if config.get("call").get("lofreq"):
        rule call_lofreq:
            input:
                expand(
                    resolve_results_filepath(
                        config.get("paths").get("results_dir"),
                        "results/call/{sample}_somatic_final_minus-dbsnp.snvs.vcf.gz",
                    ),
                    sample=list(samples_master.keys()),
                ),

if config.get("run").get("annotate"):

    rule annotate:
        input:
            expand(
                resolve_results_filepath(
                    config.get("paths").get("results_dir"),
                    "results/annotation/funcotator/{sample}_funcotated.maf",
                ),
                sample=list(samples_master.keys()),
            ),


if config.get("run").get("analysis"):

    rule analysis:
        input:
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "results/analysis/signatures/plots/cosmic_signatures.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "results/analysis/driver/plots/somatic_interactions.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "results/analysis/base/plots/top10_VAF.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "results/analysis/pathways/plots/oncogenic_pathways.png",
            ),
            resolve_single_filepath(
                config.get("paths").get("results_dir"),
                "results/analysis/heterogeneity/tables/successful.tsv",
            ),
